// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require, exports, module) {
    var DIVIDER_POSITION, MENU_ENTRY_POSITION, PANEL_POSITION, commands, css, ext, filelist, fs, ide, markup, menus, noderunner, panels;
    ide = require('core/ide');
    ext = require('core/ext');
    menus = require('ext/menus/menus');
    noderunner = require('ext/noderunner/noderunner');
    commands = require('ext/commands/commands');
    fs = require('ext/filesystem/filesystem');
    panels = require('ext/panels/panels');
    markup = require('text!ext/jasmine/jasmine.xml');
    filelist = require('ext/filelist/filelist');
    css = require("text!ext/jasmine/jasmine.css");
    DIVIDER_POSITION = 2300;
    MENU_ENTRY_POSITION = 2400;
    PANEL_POSITION = 10000;
    return module.exports = ext.register('ext/jasmine/jasmine', {
      name: 'Jasmine',
      dev: 'Tobias Metzke, Tobias Pfeiffer',
      type: ext.GENERAL,
      alone: true,
      commands: {
        'jasmine': {
          hint: 'Run your tests with jasmine!'
        }
      },
      hotitems: {},
      markup: markup,
      nodes: [],
      css: css,
      hook: function() {
        var _self;
        apf.importCssString(css);
        _self = this;
        this.markupInsertionPoint = colLeft;
        panels.register(this, {
          position: PANEL_POSITION,
          caption: "Jasmine",
          "class": "jasmine"
        });
        commands.addCommand({
          name: "jasmine",
          hint: "run your specs with jasmine",
          bindKey: {
            mac: "Command-J",
            win: "Ctrl-J"
          },
          exec: function() {
            return _self.jasmine();
          }
        });
        this.nodes.push(menus.addItemByPath("Edit/~", new apf.divider(), DIVIDER_POSITION));
        this.nodes.push(menus.addItemByPath("Edit/Jasmine", new apf.item({
          command: "jasmine"
        }), MENU_ENTRY_POSITION));
        return this.hotitems['jasmine'] = [this.nodes[1]];
      },
      init: function() {
        var _self;
        buttonTestRunJasmine.$ext.setAttribute("class", "light-dropdown");
        buttonTestStopJasmine.$ext.setAttribute("class", buttonTestStopJasmine.$ext.getAttribute("class") + " buttonTestStopJasmine");
        windowTestPanelJasmine.$ext.setAttribute("class", windowTestPanelJasmine.$ext.getAttribute("class") + " testpanelJasmine");
        _self = this;
        this.panel = windowTestPanelJasmine;
        this.nodes.push(windowTestPanelJasmine, menuRunSettingsJasmine, stateTestRunJasmine);
        ide.dispatchEvent("init.jasmine");
        console.log("after init.jasmine");
        return this.initFilelist();
      },
      initFilelist: function() {
        var _this = this;
        console.log("initFilelist");
        return filelist.getFileList(false, function(data, state) {
          var sanitizedData, specs;
          if (state !== apf.SUCCESS) {
            return;
          }
          sanitizedData = data.replace(/^\./gm, "");
          sanitizedData = sanitizedData.replace(/^\/node_modules\/.*/gm, "");
          specs = sanitizedData.match(/^.*\.spec\.(js|coffee)$/gm);
          return _this.addFiles(specs, modelTestsJasmine.queryNode("repo[1]"));
        });
      },
      addFiles: function(specs, parent) {
        var xmlFiles;
        console.log("addFiles");
        xmlFiles = "";
        specs.each(function(spec) {
          return xmlFiles += "<file path='" + apf.escapeXML(ide.davPrefix + spec) + "' name='" + apf.escapeXML(spec.split("/").pop()) + "' type='jasmine' />";
        });
        console.log("xmlFiles");
        console.log(xmlFiles);
        return modelTestsJasmine.insert("<files>" + xmlFiles + "</files>", {
          insertPoint: parent
        });
      },
      show: function() {
        if ((navbar.current != null) && (navbar.current !== this)) {
          navbar.current.disable();
        } else {
          return;
        }
        panels.initPanel(this);
        return this.enable();
      },
      enable: function() {
        return this.nodes.each(function(item) {
          if (item.enable) {
            return item.enable();
          }
        });
      },
      disable: function() {
        return this.nodes.each(function(item) {
          if (item.disable) {
            return item.disable();
          }
        });
      },
      destroy: function() {
        this.nodes.each(function(item) {
          return item.destroy(true, true);
        });
        this.nodes = [];
        return panels.unregister(this);
      },
      run: function(nodes) {
        var fileNames;
        console.log("noddeesss");
        console.log(nodes);
        fileNames = "(";
        nodes.each(function(node) {
          var name;
          name = node.getAttribute('name');
          name = name.slice(0, name.indexOf('.'));
          return fileNames += name + '|';
        });
        fileNames = fileNames.slice(0, -1) + ')';
        return noderunner.run('node_modules/jasmine-node/lib/jasmine-node/cli.js', ['--coffee', '-m', "" + fileNames + "\\.", 'spec/'], false);
      },
      jasmine: function() {
        console.log("Jasmine starts to run");
        return noderunner.run('node_modules/jasmine-node/lib/jasmine-node/cli.js', ['--coffee', '-m', "(itemStorage|server)\\.", 'spec/'], false);
      }
    });
  });

}).call(this);
